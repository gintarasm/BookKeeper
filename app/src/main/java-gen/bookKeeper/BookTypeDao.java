package bookKeeper;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import bookKeeper.BookType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOOK_TYPE.
*/
public class BookTypeDao extends AbstractDao<BookType, Long> {

    public static final String TABLENAME = "BOOK_TYPE";

    /**
     * Properties of entity BookType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookTypeCode = new Property(1, String.class, "bookTypeCode", false, "BOOK_TYPE_CODE");
        public final static Property BookTypeDesc = new Property(2, String.class, "BookTypeDesc", false, "BOOK_TYPE_DESC");
    };

    private DaoSession daoSession;


    public BookTypeDao(DaoConfig config) {
        super(config);
    }
    
    public BookTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOOK_TYPE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BOOK_TYPE_CODE' TEXT NOT NULL ," + // 1: bookTypeCode
                "'BOOK_TYPE_DESC' TEXT NOT NULL );"); // 2: BookTypeDesc
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOK_TYPE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BookType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBookTypeCode());
        stmt.bindString(3, entity.getBookTypeDesc());
    }

    @Override
    protected void attachEntity(BookType entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BookType readEntity(Cursor cursor, int offset) {
        BookType entity = new BookType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // bookTypeCode
            cursor.getString(offset + 2) // BookTypeDesc
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BookType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookTypeCode(cursor.getString(offset + 1));
        entity.setBookTypeDesc(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BookType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BookType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
