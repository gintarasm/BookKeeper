package bookKeeper;

import java.util.List;
import bookKeeper.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table BOOK_TYPE.
 */
public class BookType {

    private Long id;
    /** Not-null value. */
    private String bookTypeCode;
    /** Not-null value. */
    private String BookTypeDesc;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BookTypeDao myDao;

    private List<Book> bookTypes;

    public BookType() {
    }

    public BookType(Long id) {
        this.id = id;
    }

    public BookType(Long id, String bookTypeCode, String BookTypeDesc) {
        this.id = id;
        this.bookTypeCode = bookTypeCode;
        this.BookTypeDesc = BookTypeDesc;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBookTypeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getBookTypeCode() {
        return bookTypeCode;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBookTypeCode(String bookTypeCode) {
        this.bookTypeCode = bookTypeCode;
    }

    /** Not-null value. */
    public String getBookTypeDesc() {
        return BookTypeDesc;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBookTypeDesc(String BookTypeDesc) {
        this.BookTypeDesc = BookTypeDesc;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Book> getBookTypes() {
        if (bookTypes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BookDao targetDao = daoSession.getBookDao();
            List<Book> bookTypesNew = targetDao._queryBookType_BookTypes(id);
            synchronized (this) {
                if(bookTypes == null) {
                    bookTypes = bookTypesNew;
                }
            }
        }
        return bookTypes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetBookTypes() {
        bookTypes = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
