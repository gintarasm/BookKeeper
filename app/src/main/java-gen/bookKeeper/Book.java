package bookKeeper;

import bookKeeper.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table BOOK.
 */
public class Book {

    private Long id;
    /** Not-null value. */
    private String author;
    /** Not-null value. */
    private String bookName;
    private String comments;
    private String releaseDate;
    private Integer rating;
    private String type;
    private Long genreId;
    private Long seriesId;
    private Long bookTypeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BookDao myDao;

    private Genre genre;
    private Long genre__resolvedKey;

    private Series series;
    private Long series__resolvedKey;

    private BookType bookType;
    private Long bookType__resolvedKey;


    public Book() {
    }

    public Book(Long id) {
        this.id = id;
    }

    public Book(Long id, String author, String bookName, String comments, String releaseDate, Integer rating, String type, Long genreId, Long seriesId, Long bookTypeId) {
        this.id = id;
        this.author = author;
        this.bookName = bookName;
        this.comments = comments;
        this.releaseDate = releaseDate;
        this.rating = rating;
        this.type = type;
        this.genreId = genreId;
        this.seriesId = seriesId;
        this.bookTypeId = bookTypeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBookDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getAuthor() {
        return author;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAuthor(String author) {
        this.author = author;
    }

    /** Not-null value. */
    public String getBookName() {
        return bookName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBookName(String bookName) {
        this.bookName = bookName;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    public String getReleaseDate() {
        return releaseDate;
    }

    public void setReleaseDate(String releaseDate) {
        this.releaseDate = releaseDate;
    }

    public Integer getRating() {
        return rating;
    }

    public void setRating(Integer rating) {
        this.rating = rating;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Long getGenreId() {
        return genreId;
    }

    public void setGenreId(Long genreId) {
        this.genreId = genreId;
    }

    public Long getSeriesId() {
        return seriesId;
    }

    public void setSeriesId(Long seriesId) {
        this.seriesId = seriesId;
    }

    public Long getBookTypeId() {
        return bookTypeId;
    }

    public void setBookTypeId(Long bookTypeId) {
        this.bookTypeId = bookTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public Genre getGenre() {
        Long __key = this.genreId;
        if (genre__resolvedKey == null || !genre__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GenreDao targetDao = daoSession.getGenreDao();
            Genre genreNew = targetDao.load(__key);
            synchronized (this) {
                genre = genreNew;
            	genre__resolvedKey = __key;
            }
        }
        return genre;
    }

    public void setGenre(Genre genre) {
        synchronized (this) {
            this.genre = genre;
            genreId = genre == null ? null : genre.getId();
            genre__resolvedKey = genreId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Series getSeries() {
        Long __key = this.seriesId;
        if (series__resolvedKey == null || !series__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SeriesDao targetDao = daoSession.getSeriesDao();
            Series seriesNew = targetDao.load(__key);
            synchronized (this) {
                series = seriesNew;
            	series__resolvedKey = __key;
            }
        }
        return series;
    }

    public void setSeries(Series series) {
        synchronized (this) {
            this.series = series;
            seriesId = series == null ? null : series.getId();
            series__resolvedKey = seriesId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public BookType getBookType() {
        Long __key = this.bookTypeId;
        if (bookType__resolvedKey == null || !bookType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BookTypeDao targetDao = daoSession.getBookTypeDao();
            BookType bookTypeNew = targetDao.load(__key);
            synchronized (this) {
                bookType = bookTypeNew;
            	bookType__resolvedKey = __key;
            }
        }
        return bookType;
    }

    public void setBookType(BookType bookType) {
        synchronized (this) {
            this.bookType = bookType;
            bookTypeId = bookType == null ? null : bookType.getId();
            bookType__resolvedKey = bookTypeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
