package bookKeeper;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import bookKeeper.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOOK.
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Author = new Property(1, String.class, "author", false, "AUTHOR");
        public final static Property BookName = new Property(2, String.class, "bookName", false, "BOOK_NAME");
        public final static Property Comments = new Property(3, String.class, "comments", false, "COMMENTS");
        public final static Property ReleaseDate = new Property(4, String.class, "releaseDate", false, "RELEASE_DATE");
        public final static Property Rating = new Property(5, Integer.class, "rating", false, "RATING");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property GenreId = new Property(7, Long.class, "genreId", false, "GENRE_ID");
        public final static Property SeriesId = new Property(8, Long.class, "seriesId", false, "SERIES_ID");
        public final static Property BookTypeId = new Property(9, Long.class, "bookTypeId", false, "BOOK_TYPE_ID");
    };

    private DaoSession daoSession;

    private Query<Book> genre_GenresQuery;
    private Query<Book> series_SeriesQuery;
    private Query<Book> bookType_BookTypesQuery;

    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOOK' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'AUTHOR' TEXT NOT NULL ," + // 1: author
                "'BOOK_NAME' TEXT NOT NULL ," + // 2: bookName
                "'COMMENTS' TEXT," + // 3: comments
                "'RELEASE_DATE' TEXT," + // 4: releaseDate
                "'RATING' INTEGER," + // 5: rating
                "'TYPE' TEXT," + // 6: type
                "'GENRE_ID' INTEGER," + // 7: genreId
                "'SERIES_ID' INTEGER," + // 8: seriesId
                "'BOOK_TYPE_ID' INTEGER);"); // 9: bookTypeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAuthor());
        stmt.bindString(3, entity.getBookName());
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(4, comments);
        }
 
        String releaseDate = entity.getReleaseDate();
        if (releaseDate != null) {
            stmt.bindString(5, releaseDate);
        }
 
        Integer rating = entity.getRating();
        if (rating != null) {
            stmt.bindLong(6, rating);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        Long genreId = entity.getGenreId();
        if (genreId != null) {
            stmt.bindLong(8, genreId);
        }
 
        Long seriesId = entity.getSeriesId();
        if (seriesId != null) {
            stmt.bindLong(9, seriesId);
        }
 
        Long bookTypeId = entity.getBookTypeId();
        if (bookTypeId != null) {
            stmt.bindLong(10, bookTypeId);
        }
    }

    @Override
    protected void attachEntity(Book entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // author
            cursor.getString(offset + 2), // bookName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // comments
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // releaseDate
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // rating
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // genreId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // seriesId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // bookTypeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAuthor(cursor.getString(offset + 1));
        entity.setBookName(cursor.getString(offset + 2));
        entity.setComments(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReleaseDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRating(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGenreId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setSeriesId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setBookTypeId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "genres" to-many relationship of Genre. */
    public List<Book> _queryGenre_Genres(Long genreId) {
        synchronized (this) {
            if (genre_GenresQuery == null) {
                QueryBuilder<Book> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GenreId.eq(null));
                genre_GenresQuery = queryBuilder.build();
            }
        }
        Query<Book> query = genre_GenresQuery.forCurrentThread();
        query.setParameter(0, genreId);
        return query.list();
    }

    /** Internal query to resolve the "series" to-many relationship of Series. */
    public List<Book> _querySeries_Series(Long seriesId) {
        synchronized (this) {
            if (series_SeriesQuery == null) {
                QueryBuilder<Book> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SeriesId.eq(null));
                series_SeriesQuery = queryBuilder.build();
            }
        }
        Query<Book> query = series_SeriesQuery.forCurrentThread();
        query.setParameter(0, seriesId);
        return query.list();
    }

    /** Internal query to resolve the "bookTypes" to-many relationship of BookType. */
    public List<Book> _queryBookType_BookTypes(Long bookTypeId) {
        synchronized (this) {
            if (bookType_BookTypesQuery == null) {
                QueryBuilder<Book> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BookTypeId.eq(null));
                bookType_BookTypesQuery = queryBuilder.build();
            }
        }
        Query<Book> query = bookType_BookTypesQuery.forCurrentThread();
        query.setParameter(0, bookTypeId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGenreDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getSeriesDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getBookTypeDao().getAllColumns());
            builder.append(" FROM BOOK T");
            builder.append(" LEFT JOIN GENRE T0 ON T.'GENRE_ID'=T0.'_id'");
            builder.append(" LEFT JOIN SERIES T1 ON T.'SERIES_ID'=T1.'_id'");
            builder.append(" LEFT JOIN BOOK_TYPE T2 ON T.'BOOK_TYPE_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Book loadCurrentDeep(Cursor cursor, boolean lock) {
        Book entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Genre genre = loadCurrentOther(daoSession.getGenreDao(), cursor, offset);
        entity.setGenre(genre);
        offset += daoSession.getGenreDao().getAllColumns().length;

        Series series = loadCurrentOther(daoSession.getSeriesDao(), cursor, offset);
        entity.setSeries(series);
        offset += daoSession.getSeriesDao().getAllColumns().length;

        BookType bookType = loadCurrentOther(daoSession.getBookTypeDao(), cursor, offset);
        entity.setBookType(bookType);

        return entity;    
    }

    public Book loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Book> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Book> list = new ArrayList<Book>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Book> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Book> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
